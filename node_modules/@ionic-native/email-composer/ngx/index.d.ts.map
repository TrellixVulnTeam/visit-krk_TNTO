{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nexport interface EmailComposerOptions {\n    /**\n     * App to send the email with\n     */\n    app?: string;\n    /**\n     * Email address(es) for To field\n     */\n    to?: string | string[];\n    /**\n     * Email address(es) for CC field\n     */\n    cc?: string | string[];\n    /**\n     * Email address(es) for BCC field\n     */\n    bcc?: string | string[];\n    /**\n     * File paths or base64 data streams\n     */\n    attachments?: string[];\n    /**\n     * Subject of the email\n     */\n    subject?: string;\n    /**\n     * Email body (for HTML, set isHtml to true)\n     */\n    body?: string;\n    /**\n     * Indicates if the body is HTML or plain text\n     */\n    isHtml?: boolean;\n    /**\n     *  Content type of the email (Android only)\n     */\n    type?: string;\n}\n/**\n * @name Email Composer\n * @premier email-composer\n * @description\n *\n * Requires Cordova plugin: cordova-plugin-email-composer. For more info, please see the [Email Composer plugin docs](https://github.com/hypery2k/cordova-email-plugin).\n *\n *\n * @usage\n * ```typescript\n * import { EmailComposer } from '@ionic-native/email-composer/ngx';\n *\n * constructor(private emailComposer: EmailComposer) { }\n *\n * ...\n *\n *\n * this.emailComposer.getClients().then((apps: []) => {\n *    // Returns an array of configured email clients for the device\n * });\n *\n * this.emailComposer.hasClient().then(app, (isValid: boolean) => {\n *  if (isValid) {\n *    // Now we know we have a valid email client configured\n *    // Not specifying an app will return true if at least one email client is configured\n *  }\n * });\n *\n * this.emailComposer.hasAccount().then((isValid: boolean) => {\n *  if (isValid) {\n *    // Now we know we have a valid email account configured\n *  }\n * });\n *\n * this.emailComposer.isAvailable().then(app, (available: boolean) => {\n *  if(available) {\n *    // Now we know we can send an email, calls hasClient and hasAccount\n *    // Not specifying an app will return true if at least one email client is configured\n *  }\n * });\n *\n * let email = {\n *   to: 'max@mustermann.de',\n *   cc: 'erika@mustermann.de',\n *   bcc: ['john@doe.com', 'jane@doe.com'],\n *   attachments: [\n *     'file://img/logo.png',\n *     'res://icon.png',\n *     'base64:icon.png//iVBORw0KGgoAAAANSUhEUg...',\n *     'file://README.pdf'\n *   ],\n *   subject: 'Cordova Icons',\n *   body: 'How are you? Nice greetings from Leipzig',\n *   isHtml: true\n * }\n *\n * // Send a text message using default options\n * this.emailComposer.open(email);\n * ```\n *\n * You can also assign aliases to email apps\n * ```ts\n * // add alias\n * this.email.addAlias('gmail', 'com.google.android.gm');\n *\n * // then use alias when sending email\n * this.email.open({\n *   app: 'gmail',\n *   ...\n * });\n * ```\n * @interfaces\n * EmailComposerOptions\n */\nexport declare class EmailComposer extends IonicNativePlugin {\n    /**\n     * Checks if the app has a permission to access email accounts information\n     * @return {Promise<boolean>} returns a promise that resolves with a boolean that indicates if the permission was granted\n     */\n    hasPermission(): Promise<boolean>;\n    /**\n     * Request permission to access email accounts information\n     * @return {Promise<boolean>} returns a promise that resolves with a boolean that indicates if the permission was granted\n     */\n    requestPermission(): Promise<boolean>;\n    /**\n     * Verifies if an email account is configured on the device.\n     *\n     * @returns {Promise<any>} Resolves if available, rejects if not available\n     */\n    hasAccount(): Promise<any>;\n    /**\n     * Verifies if a specific email client is installed on the device.\n     *\n     * @param {string} [app] App id or uri scheme.\n     * @returns {Promise<any>} Resolves if available, rejects if not available\n     */\n    hasClient(app?: string): Promise<any>;\n    /**\n     * Returns an array of email clients installed on the device.\n     *\n     * @returns {Promise<string[]>} Resolves if available, rejects if not available\n     */\n    getClients(): Promise<string[]>;\n    /**\n     * Verifies if sending emails is supported on the device.\n     *\n     * @param {string} [app] App id or uri scheme.\n     * @returns {Promise<any>} Resolves if available, rejects if not available\n     */\n    isAvailable(app?: string): Promise<any>;\n    /**\n     * Displays the email composer pre-filled with data.\n     *\n     * @param {EmailComposerOptions} options Email\n     * @param {any} [scope] Scope for the promise\n     * @returns {Promise<any>} Resolves promise when the EmailComposer has been opened\n     */\n    open(options: EmailComposerOptions, scope?: any): Promise<any>;\n    /**\n     * Adds a new mail app alias.\n     *\n     * @param {string} alias The alias name\n     * @param {string} packageName The package name\n     */\n    addAlias(alias: string, packageName: string): void;\n}\n"]}