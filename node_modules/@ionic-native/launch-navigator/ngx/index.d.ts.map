{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nexport interface PromptsOptions {\n    /**\n     * a function to pass the user's decision whether to remember their choice of app.\n     * This will be passed a single boolean value indicating the user's decision.\n     * @param rememberChoice\n     */\n    callback?: (rememberChoice: boolean) => void;\n    /**\n     * text to display in the native prompt header asking user whether to remember their choice.\n     * Defaults to \"Remember your choice?\" if not specified.\n     */\n    headerText?: string;\n    /**\n     * text to display in the native prompt body asking user whether to remember their choice.\n     * Defaults to \"Use the same app for navigating next time?\" if not specified.\n     */\n    bodyText?: string;\n    /**\n     * text to display for the Yes button.\n     * Defaults to \"Yes\" if not specified.\n     */\n    yesButtonText?: string;\n    /**\n     * text to display for the No button.\n     * Defaults to \"No\" if not specified.\n     */\n    noButtonText?: string;\n}\nexport interface RememberChoiceOptions {\n    /**\n     * whether to remember user choice of app for next time, instead of asking again for user choice.\n     * `\"prompt\"` - Prompt user to decide whether to remember choice.\n     *  - Default value if unspecified.\n     *  - If `promptFn` is defined, this will be used for user confirmation.\n     *  - Otherwise (by default), a native dialog will be displayed to ask user.\n     * `false` - Do not remember user choice.\n     * `true` - Remember user choice.\n     */\n    enabled?: boolean | string;\n    /**\n     * a function which asks the user whether to remember their choice of app.\n     * If this is defined, then the default dialog prompt will not be shown, allowing for a custom UI for asking the user.\n     * This will be passed a callback function which should be invoked with a single boolean argument which indicates the user's decision to remember their choice.\n     * @param callback\n     */\n    promptFn?: (callback: (rememberChoice: boolean) => void) => void;\n    /**\n     * options related to the default dialog prompt used to ask the user whether to remember their choice of app.\n     */\n    prompt?: PromptsOptions;\n}\nexport interface AppSelectionOptions {\n    /**\n     * text to display in the native picker which enables user to select which navigation app to launch.\n     * Defaults to \"Select app for navigation\" if not specified.\n     */\n    dialogHeaderText?: string;\n    /**\n     * text to display for the cancel button in the native picker which enables user to select which navigation app to launch.\n     * Defaults to \"Cancel\" if not specified.\n     */\n    cancelButtonText?: string;\n    /**\n     * List of apps, defined as `launchnavigator.APP` constants, which should be displayed in the picker if the app is available.\n     * This can be used to restrict which apps are displayed, even if they are installed.\n     * By default, all available apps will be displayed.\n     */\n    list?: string[];\n    /**\n     * Callback to invoke when the user selects an app in the native picker.\n     * A single string argument is passed which is the app what was selected defined as a `launchnavigator.APP` constant.\n     */\n    callback?: (app: string) => void;\n    /**\n     * (Android only) native picker theme. Specify using `actionsheet.ANDROID_THEMES` constants.\n     * Default `actionsheet.ANDROID_THEMES.THEME_HOLO_LIGHT`\n     */\n    androidTheme?: number;\n    /**\n     * options related to whether to remember user choice of app for next time, instead of asking again for user choice.\n     */\n    rememberChoice?: RememberChoiceOptions;\n}\nexport interface LaunchNavigatorOptions {\n    /**\n     * A callback to invoke when the navigation app is successfully launched.\n     */\n    successCallback?: Function;\n    /**\n     * A callback to invoke if an error is encountered while launching the app.\n     * A single string argument containing the error message will be passed in.\n     */\n    errorCallback?: (error: string) => void;\n    /**\n     * name of the navigation app to use for directions.\n     * Specify using launchnavigator.APP constants.\n     * e.g. `launchnavigator.APP.GOOGLE_MAPS`.\n     * If not specified, defaults to User Selection.\n     */\n    app?: string;\n    /**\n     * nickname to display in app for destination. e.g. \"Bob's House\".\n     */\n    destinationName?: string;\n    /**\n     * Start point of the navigation.\n     * If not specified, the current device location will be used.\n     * Either:\n     *  - a {string} containing the address. e.g. \"Buckingham Palace, London\"\n     *  - a {string} containing a latitude/longitude coordinate. e.g. \"50.1. -4.0\"\n     *  - an {array}, where the first element is the latitude and the second element is a longitude, as decimal numbers. e.g. [50.1, -4.0]\n     */\n    start?: string | number[];\n    /**\n     * nickname to display in app for start . e.g. \"My House\".\n     */\n    startName?: string;\n    /**\n     * Transportation mode for navigation: \"driving\", \"walking\" or \"transit\". Defaults to \"driving\" if not specified.\n     */\n    transportMode?: string;\n    /**\n     * If true, debug log output will be generated by the plugin. Defaults to false.\n     */\n    enableDebug?: boolean;\n    /**\n     * a key/value map of extra app-specific parameters. For example, to tell Google Maps on Android to display Satellite view in \"maps\" launch mode: `{\"t\": \"k\"}`\n     */\n    extras?: any;\n    /**\n     * (Android only) mode in which to open Google Maps app.\n     * `launchnavigator.LAUNCH_MODE.MAPS` or `launchnavigator.LAUNCH_MODE.TURN_BY_TURN`\n     * Defaults to `launchnavigator.LAUNCH_MODE.MAPS` if not specified.\n     */\n    launchModeGoogleMaps?: string;\n    /**\n     * (iOS only) method to use to open Apple Maps app.\n     * `launchnavigator.LAUNCH_MODE.URI_SCHEME` or `launchnavigator.LAUNCH_MODE.MAPKIT`\n     * Defaults to `launchnavigator.LAUNCH_MODE.URI_SCHEME` if not specified.\n     */\n    launchModeAppleMaps?: string;\n    /**\n     * (Windows only) If false, the plugin will NOT attempt to use the geolocation plugin to determine the current device position when the start location parameter is omitted. Defaults to true.\n     */\n    enableGeolocation?: boolean;\n    /**\n     * (Android and iOS only) If true, and input location type(s) doesn't match those required by the app, use geocoding to obtain the address/coords as required. Defaults to true.\n     */\n    enableGeocoding?: boolean;\n    /**\n     * options related to the default native actionsheet picker which enables user to select which navigation app to launch if `app` is not specified.\n     */\n    appSelection?: AppSelectionOptions;\n}\nexport interface UserChoice {\n    /**\n     * Indicates whether a user choice exists for a preferred navigator app.\n     * @param callback - function to pass result to: will receive a boolean argument.\n     */\n    exists: (callback: (exists: boolean) => void) => void;\n    /**\n     * Returns current user choice of preferred navigator app.\n     * @param callback - function to pass result to: will receive a string argument indicating the app, which is a constant in `launchnavigator.APP`.\n     */\n    get: (callback: (app: string) => void) => void;\n    /**\n     * Sets the current user choice of preferred navigator app.\n     * @param app - app to set as preferred choice as a constant in `launchnavigator.APP`.\n     * @param callback - function to call once operation is complete.\n     */\n    set: (app: string, callback: () => void) => void;\n    /**\n     * Clears the current user choice of preferred navigator app.\n     * @param callback - function to call once operation is complete.\n     */\n    clear: (callback: () => void) => void;\n}\nexport interface UserPrompted {\n    /**\n     * Indicates whether user has already been prompted whether to remember their choice a preferred navigator app.\n     * @param callback - function to pass result to: will receive a boolean argument.\n     */\n    get: (callback: (exists: boolean) => void) => void;\n    /**\n     * Sets flag indicating user has already been prompted whether to remember their choice a preferred navigator app.\n     * @param callback - function to call once operation is complete.\n     */\n    set: (callback: () => void) => void;\n    /**\n     * Clears flag which indicates if user has already been prompted whether to remember their choice a preferred navigator app.\n     * @param callback - function to call once operation is complete.\n     */\n    clear: (callback: () => void) => void;\n}\nexport interface AppSelection {\n    userChoice: UserChoice;\n    userPrompted: UserPrompted;\n}\n/**\n * @name Launch Navigator\n * @description\n * Requires Cordova plugin: uk.co.workingedge.phonegap.plugin.launchnavigator. For more info, please see the [LaunchNavigator plugin docs](https://github.com/dpa99c/phonegap-launch-navigator).\n *\n * @usage\n * Please refer to the plugin's repo for detailed usage. This docs page only explains the Native wrapper.\n *\n * ```typescript\n * import { LaunchNavigator, LaunchNavigatorOptions } from '@ionic-native/launch-navigator/ngx';\n *\n * constructor(private launchNavigator: LaunchNavigator) { }\n *\n * ...\n *\n * let options: LaunchNavigatorOptions = {\n *   start: 'London, ON',\n *   app: LaunchNavigator.APPS.UBER\n * }\n *\n * this.launchNavigator.navigate('Toronto, ON', options)\n *   .then(\n *     success => console.log('Launched navigator'),\n *     error => console.log('Error launching navigator', error)\n *   );\n * ```\n * @interfaces\n * LaunchNavigatorOptions\n * PromptsOptions\n * RememberChoiceOptions\n * AppSelectionOptions\n * UserChoice\n * UserPrompted\n * AppSelection\n */\nexport declare class LaunchNavigator extends IonicNativePlugin {\n    APP: any;\n    TRANSPORT_MODE: any;\n    appSelection: AppSelection;\n    /**\n     * Launches navigator app\n     * @param destination {string|number[]} Location name or coordinates (as string or array)\n     * @param options {LaunchNavigatorOptions}\n     * @returns {Promise<any>}\n     */\n    navigate(destination: string | number[], options?: LaunchNavigatorOptions): Promise<any>;\n    /**\n     * Determines if the given app is installed and available on the current device.\n     * @param app {string}\n     * @returns {Promise<any>}\n     */\n    isAppAvailable(app: string): Promise<any>;\n    /**\n     * Returns a list indicating which apps are installed and available on the current device.\n     * @returns {Promise<string[]>}\n     */\n    availableApps(): Promise<string[]>;\n    /**\n     * Returns the display name of the specified app.\n     * @param app {string}\n     * @returns {string}\n     */\n    getAppDisplayName(app: string): string;\n    /**\n     * Returns list of supported apps on a given platform.\n     * @param platform {string}\n     * @returns {string[]}\n     */\n    getAppsForPlatform(platform: string): string[];\n    /**\n     * Indicates if an app on a given platform supports specification of transport mode.\n     * @param app {string} specified as a string, you can use one of the constants, e.g `LaunchNavigator.APP.GOOGLE_MAPS`\n     * @param platform {string}\n     * @returns {boolean}\n     */\n    supportsTransportMode(app: string, platform: string): boolean;\n    /**\n     * Returns the list of transport modes supported by an app on a given platform.\n     * @param app {string}\n     * @param platform {string}\n     * @returns {string[]}\n     */\n    getTransportModes(app: string, platform: string): string[];\n    /**\n     * @param app {string}\n     * @param platform {string}\n     * @returns {boolean}\n     */\n    supportsDestName(app: string, platform: string): boolean;\n    /**\n     * Indicates if an app on a given platform supports specification of start location.\n     * @param app {string}\n     * @param platform {string}\n     * @returns {boolean}\n     */\n    supportsStart(app: string, platform: string): boolean;\n    /**\n     * @param app {string}\n     * @param platform {string}\n     * @returns {boolean}\n     */\n    supportsStartName(app: string, platform: string): boolean;\n    /**\n     * Indicates if an app on a given platform supports specification of launch mode.\n     * Note that currently only Google Maps on Android does.\n     * @param app {string}\n     * @param platform {string}\n     * @returns {boolean}\n     */\n    supportsLaunchMode(app: string, platform: string): boolean;\n    /**\n     * @param destination {string | number[]}\n     * @param options {LaunchNavigatorOptions}\n     */\n    userSelect(destination: string | number[], options: LaunchNavigatorOptions): void;\n}\n"]}